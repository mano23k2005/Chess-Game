# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ayp9m375ATRU0MehMrwhiWXE414CpmVP
"""

import tkinter as tk
import tkinter.messagebox as messagebox

class ChessGame:
    def _init_(self, master):
        self.master = master
        master.title("Chess Game")

        self.board = [
            ["r", "n", "b", "q", "k", "b", "n", "r"],
            ["p", "p", "p", "p", "p", "p", "p", "p"],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            ["P", "P", "P", "P", "P", "P", "P", "P"],
            ["R", "N", "B", "Q", "K", "B", "N", "R"],
        ]  # Initial board state

        self.buttons = {}  # Store buttons in a dictionary for easy access
        self.create_board()

        self.selected_piece = None
        self.valid_moves =
        self.turn = "white" # Start with white's turn

    def create_board(self):
        for row in range(8):
            for col in range(8):
                color = "white" if (row + col) % 2 == 0 else "grey" # Alternating colors
                button = tk.Button(
                    self.master,
                    text=self.board[row][col],
                    width=3,
                    height=1,
                    bg=color,
                    command=lambda r=row, c=col: self.square_clicked(r, c),
                )
                button.grid(row=row, column=col)
                self.buttons[(row, col)] = button

    def square_clicked(self, row, col):
        piece = self.board[row][col]

        if self.selected_piece:  # A piece is already selected
            if (row, col) in self.valid_moves: # Check if the move is valid
                self.move_piece(self.selected_piece, (row, col))
                self.selected_piece = None
                self.valid_moves =
                self.switch_turn() # Switch turn after a valid move
                self.update_board() # Update the GUI after a move
            else:
                self.selected_piece = None # Deselect if invalid move or clicking the same piece
                self.valid_moves =
                self.update_board() # Update the GUI after deselecting

        elif piece!= " " and (piece.isupper() and self.turn == "white" or piece.islower() and self.turn == "black"): # Select a piece if it's not empty and it's the current player's turn
            self.selected_piece = (row, col)
            self.valid_moves = self.get_valid_moves(row, col)
            self.update_board()

    def move_piece(self, start_pos, end_pos):
        start_row, start_col = start_pos
        end_row, end_col = end_pos
        self.board[end_row][end_col] = self.board[start_row][start_col]
        self.board[start_row][start_col] = " "

    def get_valid_moves(self, row, col):
        # (Simplified movement logic â€“ you'll need to implement full chess rules)
        # This example allows any piece to move one square in any direction.
        valid_moves =
        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                if dr == 0 and dc == 0:
                    continue  # Can't stay in the same place
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < 8 and 0 <= new_col < 8:  # Stay on the board
                    valid_moves.append((new_row, new_col))
        return valid_moves

    def switch_turn(self):
        self.turn = "black" if self.turn == "white" else "white"

    def update_board(self):
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                color = "white" if (row + col) % 2 == 0 else "grey"

                if (row, col) == self.selected_piece:
                    self.buttons[(row, col)].config(bg="yellow")  # Highlight selected piece
                elif (row, col) in self.valid_moves:
                    self.buttons[(row, col)].config(bg="lightgreen") # Highlight valid moves
                else:
                    self.buttons[(row, col)].config(bg=color)  # Reset color

                self.buttons[(row, col)].config(text=piece) # Update the text (in case of captures, etc.)


root = tk.Tk()
game = ChessGame(root)
root.mainloop()